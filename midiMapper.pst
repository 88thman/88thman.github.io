//////////////////// DEFINE YOUR MIDI MAPPING AND SETTINGS /////////////////////
var MIDI_MAPPING = ` // Please leave this on line-number 2 to get accurate error-messages
receive
	channel 1 - 5       // receives channel 1, 2, 3, 4 and 5
		type continousControl
			number 1, 11  // receives cc1 and cc11
				value any // receives any value from cc1 and cc11 from channels 1 - 5
send
	channel 2
		type continousControl
			number input            // in this case either cc1 or cc11
				value input          // send received input value
		type programChange
			number [5, 2, 9, 1 - 3] // Send sequentially 5, 2, 9, 1, 2, 3 and repeat

receive: channel any; type continousControl; number 113;   value any
send:   channel input;     type input;      number input; value input

r: ch any; typ cc; nr 7;    val any // Volume
s: ch  10; typ cc; nr 1,11; val i   // Modulation & Expression

	receive: channel 1; type noteOn; number g#4
	send:    channel 4

	r ch:16 t:cc nr:11 v:any
	s ch:1  t:i  nr:13 v:i/2

	r 16 cc 11 any
	s 1  cc 13 i/2

	r ch:16 t:cc nr:any v:any
	s ch:3  t:i  nr:i   v:i+2
	
	r ch:16 t:cc
	s ch:3 v:i+2

	r 6 s 5                   // Receives channel 6, sends to channel 5
	r 2 cc 1-3                // Block cc 1, 2 and 3 from channel 2
	r any pc s i cc 30 [1-5]  // Route programChanges to cc 30 and step through sequence [1, 2, 3, 4, 5]













// [1] Sends all cc7 to channel 1:
receive
channel any
	type controlChange
		number 7
			value any
send
channel 1
	type controlChange
		number 7
			value input

// [2 Abbreviations] Pass through cc 1 and 11 from channels 2 to 12:
rec
ch: 2-12
	typ: cc
		nr: 1, 11
			val: any
snd
ch: i
	typ: i
		nr: i
			val: i


// [3 Skipping Commands] Route all MIDI-Messages from channel 16 to channel 5:
r: ch 16
s: ch  5

// [4] NoteOns toggle on/off: cc95 with g3 and cc96 with note 70
rec
ch: 1
	typ: noteOn
		nr: g3
			val: 127
send
ch: 1
	typ: cc
		nr: 95
			val: [0,127]
		
rec
ch: any
	typ: noteOn
		number: 70
			val: 127
send
ch: 1
	typ: cc
		nr: 96
			val: [0,127]
	
// [5] Block any message from channel 4 and cc1-11 from channel 5:
r
ch: 4
r
ch: 5
	typ: cc 
		nr: 1-11

// [6] Use value of cc 30 for program change
r ch: 15; typ: cc; nr: 30; val: any
s ch: 1; typ: programChange; nr: inVal
`;
var PASS_THROUGH_INPUT = false; // true or false
var SEND_UNMAPPED_MIDI = true; // true or false
var MIDDLE_C_NUMBER = 4; // corresponds to midi note 60
var NOTE_NAMES = "c, c#, d, d#, e, f, f#, g, g#, a, a#, b";
// can be modified, german for example: 'c, cis, d, dis, e, f, fis, g, gis, a, b, h'
// be careful to not use any of the abbreviations, it might not work
/*////////////////////////////////// MANUAL ////////////////////////////////////
This is hopefully the most advanced and fastest but easy to understand midiMapper for Mainstage.
https://github.com/88thman/mainstageScripts // TODO Aktuelle Adresse

Short Example: (Go to MIDI_MAPPING = ``; to configure your mapping)

	receive
		channel 1 - 5                 // receives channel 1, 2, 3, 4 and 5
			type continousControl
				number 1, 11            // receives cc1 and cc11
					value any            // receives any value from cc1 and cc11 from channels 1 - 5
	send
		channel 2
			type continousControl
				number input            // in this case either cc1 or cc11
					value input          // send received input value
			type programChange
				number [5, 2, 9, 1 - 3] // Send sequentially 5, 2, 9, 1, 2, 3 and repeat
	

Hierarchy of commands: (for receiving and sending)

	channel -> type -> number -> value


Command-specifications: (for receiving and sending)

	+---------+------------------+---------------------+------------+
	| CHANNEL |       TYPE       |        NUMBER       |   VALUE    |
	+---------+------------------+---------------------+------------+
	|         |                  |        pitch        |  velocity  |
	|  1...16 | noteOn           | 1...127, <noteName> |  0 ... 127 |
	|         | noteOff          | 1...127, <noteName> |  0 ... 127 |
	+---------+------------------+---------------------+------------+
	|         |                  |       pitch         |  pressure  |
	|  1...16 | polyPressure     | 1...127, <noteName> |  0 ... 127 |
	+---------+------------------+---------------------+------------+
	|         | continousControl |        0...127      |  0 ... 127 |
	|  1...16 | programChange    |        0...127      | XXXXXXXXXX |
	|         | channelPressure  |        0...127      | XXXXXXXXXX |
	|         | pitchBend        |    -8192...8191     | XXXXXXXXXX |
	+---------+------------------+---------------------+------------+

	channel examples:
		any   = Receive any channel
		15    = Channel 15
		1,2   = Channel 1 and 2
		3 - 6 = Channels 3, 4, 5 and 6
		input = Send input channel (See "Send-MIDI-Value")

	type and associated number examples:
		noteOn 60               = Only noteOn 60 (Middle C)
		noteOff g4-a#6          = NotesOff between g4 and a#6 (including those)
		c0, c1, c#7             = NotesOn: c0, c1 and c#7 // TODO ???????????
		polyPressure 1-10       = PolyPressure of notes 1, 2, 3, ..., 10
		polyPressure d#3        = PolyPressure of note d#3
		controlChange any       = Any continous controller
		continousControl 1,4    = Continous controllers 1 and 4
		continousControl1,11-13 = Continous controllers 1, 11, 12 and 13
		programChange 100       = Program change 100
		channelPressure any     = Any number of channelpressure
		pitchBend -2000-2000    = Pitchbends -2000, -1999, -1998, ..., 1999, 2000
		pitchBend -10--5,3      = Pitchbends -10, -9, -8, -7, -6, -5, 3
	
	
Send-MIDI-Value:

	To manipulate the values beeing sent, you can specify static numbers, ranges, sequences and input-depending numbers.

	<nr>                = Send static number
	<nr1>,<nr2>,...     = Send nr1 and nr2 simultanously
	<nr1>-<nr2>         = Send all numbers between number1 and number2 (including those)
	[<nr1>,<nr2>,...]   = Send sequence (First incomming message sends nr1, second incoming message sends nr2,...)
	input               = Send input
	input<modification> = Send modified input
	
	Examples:
		7         = Send 7
		5,10      = Send 5 and 10
		[20,90]   = Toggle between 20 and 90
		[3, 1, 2] = Send sequentially 3, 1, 2 and repeat
		4-7       = Send 4, 5, 6 and 7
		input     = Send input value
		input+2   = Send (input value + 2)
		input-5   = Send (input value - 5)
		input/2-3 = Send ((input value / 2) - 3)
		input*0.2 = Send (input value * 0.2)
		input,input+20,[0,127],3,16 = Send combination of input, seqence and absolute values
	
	Information:
		"input" depends on it's position. (Below are alternatives)

		receive: channel any; type continousControl; number 113; value any
		|                 |                  |               |          |
		|                 V                  V               V          V
		send:   channel input;        type input; number input; value input

Special Send-MIDI-Values:
	
	To send a different inputValue than the positional, use following, absolute commands:
	
	inputType (Do you really need this? ;)
	inputChannel
	inputNumber
	inputValue
	
	(these can be modified too)

Abbreviations:
	
	r = rec = receive
	s = snd = send
	t = typ = type
	ch      = channel
	n = nr  = number
	v = val = value
	
	i  = input
	it = inTyp = inputType
	ic = inCh  = inputChannel
	in = inNum = inputNumber
	iv = inVal = inputValue
	
	cc = ctrl = continousControl
	on = nOn  = noteOn
	of = nOff = noteOff
	pp = poPr = polyPressure
	pc = prog = programChange
	cp = chPr = channelPressure
	pb = bend = pitchBend
	
Comments:

	You may want to comment your mapping.
	// comment until the end of line
	
	Example:
		r: ch any; typ cc; nr 7;    val any // Volume
		s: ch  10; typ cc; nr 1,11; val i   // Modulation & Expression

Pro-Tips:

	a) You can use spaces, line breaks and following symbols to beautify your mappings:
		
		;.<>"'={}&|!%^:_@?
		
		Example:
			receive: type noteOn; channel 1; number g#4
			send:    channel 4
		
		Important: Commands and values need separation either with space or symbol,
		only notenames combine letters with numbers without spacing. (g5, g#4)
			
	b) You can skip command names as long as you stay within the hierarchy.
		Skipped, recieiving commands will include any incoming channel, type, number and value.
		Skipped, sending commands will inherit input channel, type, number and value.

		Instead of:
			r ic:16 it:cc in:11 iv:any
			s oc:1  ot:i  on:13 ov:i/2
		you can write:
			r 16 cc 11 any
			s 1  cc 13 i/2
		which means:
			Route cc11 from channel 16 to cc13 in channel 1 with value divided by two

	c) You can skip commands by naming the next command
		(Even another order of commands is possible but I recommend consistency)

		Not given input will be handled as any input
		For not given output, input will be sent

		Instead of:
			r ch:16 t:cc n:any v:any
			s ch:3  t:i  n:i   v:i+2
		you can write:
			r ch:16 t:cc
			s ch:3  v:i+2
		which means:
			Route controllers from channel 16 to channel 3
			and add 2 to the value
	
	d) Block messages by not defining send command

		receive ch 5 // without send command, channel 5 is beeing blocked

	e) Combine abbreviations with Tips to write powerful yet short commands
	
		Examples:
			r 6 s 5                   // Receives channel 6, sends to channel 5
			r 2 cc 1-3                // Block cc 1, 2 and 3 from channel 2
			r any pc s i cc 30 [1-5]  // Route programChanges to cc 30 and step through sequence [1, 2, 3, 4, 5]
*/
/////////////////////////// EXAMPLE (can be deleted) ///////////////////////////

// TODO Put Example in comment section

var MIDI_MAPPING_EXAMPLE = `

`;
//////////////////////////////// END OF EXAMPLE ////////////////////////////////

/////////////////// CODE - DO NOT EDIT (unless you know how) ///////////////////
var noteNames = NOTE_NAMES.replace(/\s/g, "").split(/,/);
var dict = {
	r: "receive",
	rec: "receive",
	receive: "receive",
	s: "send",
	snd: "send",
	send: "send",
	ch: "channel",
	channel: "channel",
	t: "type",
	typ: "type",
	type: "type",
	nr: "number",
	number: "number",
	v: "value",
	val: "value",
	value: "value",

	i: "input",
	input: "input",
	ic: "inputchannel",
	inch: "inputchannel",
	inputchannel: "inputchannel",
	it: "inputtype",
	intyp: "inputtype",
	inputtype: "inputtype",
	in: "inputnumber",
	innum: "inputnumber",
	inputnumber: "inputnumber",
	iv: "inputvalue",
	inval: "inputvalue",
	inputvalue: "inputvalue",

	cc: "continouscontrol",
	ctrl: "continouscontrol",
	controlchange: "continouscontrol",
	continouscontrol: "continouscontrol",
	on: "noteon",
	non: "noteon",
	noteon: "noteon",
	of: "noteoff",
	noff: "noteoff",
	noteoff: "noteoff",
	pp: "polypressure",
	poPr: "polypressure",
	polypressure: "polypressure",
	pc: "programchange",
	prog: "programchange",
	programchange: "programchange",
	cp: "channelpressure",
	chpr: "channelpressure",
	channelpressure: "channelpressure",
	pb: "pitchbend",
	bend: "pitchbend",
	pitchbend: "pitchbend",

	any: "any"
};

function T(t) {
	if (dict[t]) {
		return dict[t];
	} else {
		return undefined;
	}
}

class NoteOff { }
class NoteOn { }
class PolyPressure { }
class ControlChange { }
class ProgramChange { }
class PitchBend { }
class ChannelPressure { }

/*
class Collection {
  constructor(initState) {
	 this.items = initState;
  }

  add(item) {
	 if (this.array) {
		this.items.push(item);
	 } else {
		this.array = true;
		this.items = [item];
	 }
  }

  forEach(func) {
	 if (this.array) {
		this.items.forEach((item) => {
		  func(item);
		});
	 } else {
		func(this.items);
	 }
  }
}
	[
		type: [
			channel: [
				number: [
					value: []
				]
			]
		]
	]
*/

class Message {
	static HIERARCHY = ["channels", "event", "numbers", "values"];
	iterator = 0;

	constructor(initState) {
		this.initState = initState;
		this.channels = initState;
		this.eventType = initState;
		this.numbers = initState;
		this.values = initState;
	}

	clone(depth) {
		let m = new Message(this.initState);
		let i = this.HIERARCHY.indexOf(depth) + 1;
		while (i) {
			--i;
			m[this.HIERARCHY[i]] = this[this.HIERARCHY[i]]; // TODO clone object
		}
		return m;
	}

	setChannel(channel) {
		this.event.channel = channel;
	}
	setNumber(number) {
		this.event.number = number;
	}
	setValue(value) {
		this.event.value = value;
	}

	create = {
		noteon: function () {
			this.event = new NoteOn();
			this.setNumber = function (pitch) {
				this.event.pitch = pitch;
			};
			this.setValue = function (velocity) {
				this.event.velocity = velocity;
			};
		},
		noteoff: function () {
			this.event = new NoteOff();
			this.setNumber = function (pitch) {
				this.event.pitch = pitch;
			};
			this.setValue = function (velocity) {
				this.event.velocity = velocity;
			};
		},
		polypressure: function () {
			this.event = new PolyPressure();
			this.setNumber = function (pitch) {
				this.event.pitch = pitch;
			};
		},
		continouscontrol: function () {
			this.event = new ControlChange();
		},
		programchange: function () {
			this.event = new ProgramChange();
			this.setValue = this.setNumber;
		},
		channelpressure: function () {
			this.event = new ChannelPressure();
			this.setNumber = function (dummy) { };
		},
		pitchbend: function () {
			this.event = new PitchBend();
			this.setNumber = function (dummy) { };
		}
	}; // create = {

	send() {
		this.channels.forEach((channel) => {
			if (Array.isArray(channel)) {
				channel = channel[this.iterator % channel.length];
			}
			this.setChannel(channel);

			this.numbers.forEach((number) => {
				if (Array.isArray(number)) {
					number = number[this.iterator % number.length];
				}
				this.setNumber(number);

				this.values.forEach((value) => {
					if (Array.isArray(value)) {
						value = value[this.iterator % value.length];
					}
					this.setValue(value);

					this.event.send();
				});
			});
		});
		this.iterator++;
	} // send()
}

var m,
	mappings = [];

function interpreteLine(line, lNr) {
	return line
		.toLowerCase()
		.replace(/\s*\/\/.*/g, "") // remove comments
		.replace(/[;.<>"'={}&|!%^:_@?]/g, " ") // replace symbols
		.replace(/(\S)any/g, "$1 any") // space any
		.replace(/\b([a-z]+)(?=[\s\/*+-]|$)/g, (_m, a) => {
			let t = T(a);
			if (t === undefined) {
				throw new InputError(
					`Sorry, I can't figure out what "${a}" means.`,
					lNr
				);
			}
			return " " + t + " ";
		})
		.replace(/\b([a-z#]+)(-?[0-9])\b/g, function (m, a, b) {
			let pos = noteNames.indexOf(a);
			if (pos !== -1) {
				let nr = pos;
				nr += 12 * (5 - MIDDLE_C_NUMBER + Number(b));
				if (nr < 0 || nr > 127) {
					throw new InputError(
						`Note "${m}" (${nr}) is out of MIDI-Range [0 ... 127]`,
						lNr
					);
				} else {
					return nr;
				}
			} else {
				throw new InputError(
					`Couldn't find "${a}" of "${m}" in NOTE_NAMES`,
					lNr
				);
			}
		})
		.replace(/ *([-+*/,]) */g, "$1") // remove spaces around -+*/,
		.replace(/\s+/g, " ") // replace whitespaces
		.replace(/\[\s*/g, "[") // remove spaces after [
		.replace(/\s*\]/g, "]") // remove spaces before ]
		.replace(/^ | $/g, ""); // remove first and last space
}

function convertCommand(cmd, lNr) {
	
	let array = [];

	cmd = cmd.replace(/\[([^\]]+)\]/g, function (_m, a) {
		array.push(new Sequence(a, lNr));
		return "";
	});

	cmd
		.replace(/,,/, ",")
		.split(/,/)
		.forEach((p) => {
			Trace(`      >> ${p}`);
			let range = p.match(/^(-?[0-9]+)-(-?[0-9]+)$/);
			if (range) {
				array.push(new Range(range[1], range[2], lNr));
			} else if (!isNaN(p)) {
				array.push(p);
			} else if (p === "any") {
				return "any";
			} else if (p.match(/input(?:|type|channel|number|value)/)) {
				array.push(p);
				// TODO modified input + 1...
			} else {
				throw new InputError(`Sorry, couldn't convert command-value "${p}"`, lNr);
			}
		});

	return array;
}

class Mapping {
	receive = [];
	send = [];
}


function createMappings() {
	function interpreteCommand(cmd) {
		if (!cmd.match(/\S/)) {
			// catch empty lines
		} else if (cmd === "receive") {
			message = new Message("any");
			mapping = new Mapping();
			mapping.receive = [message];
			mapping.send = [];
			mappings.push(mapping);
			hierarchy = "channels";
		} else if (cmd === "send" || hierarchy === "send") {
			if (mapping.receive.length) {
				message = new Message("input");
				mapping.send.push(message);
				hierarchy = "channels";
				if (cmd !== "send") {
					interpreteCommand(cmd);
				}
			} else {
				throw new InputError(
					"No receiving message declared before sending",
					lNr
				);
			}
		} else if (cmd === "channel") {
			hierarchy = "channels";
		} else if (cmd === "type") {
			hierarchy = "type";
		} else if (cmd === "number") {
			hierarchy = "numbers";
		} else if (cmd === "value") {
			hierarchy = "values";
		} else if (hierarchy === "channels") {
			Trace(`   channels: ${cmd}`);
			message.channels = convertCommand(cmd, lNr);
			hierarchy = "type";
		} else if (hierarchy === "type") {
			Trace(` -> hierarchy: ${hierarchy}; cmd: ${cmd}`)
			if (cmd === "input" || cmd === "any") {
				// Do nothing since input and any by default
			} else if (message.create[cmd]) {
				message.create[cmd]();
				message.eventType = cmd;
			} else {
				throw new InputError(`Cant find type "${cmd}"`, lNr);
			}
			hierarchy = "numbers";
		} else if (hierarchy === "numbers") {
			Trace(`   numbers: ${cmd}`);
			message.numbers = convertCommand(cmd, lNr);
			hierarchy = "values";
		} else if (hierarchy === "values") {
			Trace(`   values: ${cmd}`);
			message.numbers = convertCommand(cmd, lNr);
			hierarchy = "send";
		}
	}

	let message, hierarchy, lNr = 2, mapping = new Mapping();
	MIDI_MAPPING.split(/\n/).forEach((line) => {
		interpreteLine(line, lNr)
			.split(/ /)
			.forEach(interpreteCommand);
		++lNr;
	});
}

class InputError extends Error {
	constructor(msg, lNr = 0) {
		if (lNr) {
			super(`[Line: ${lNr}] ${msg}`);
		} else {
			super(msg);
		}
		this.name = "Input Error";
	}
}

class Range {
	constructor(start, end, lNr = 0) {
		if (isNaN(start)) {
			throw new InputError(
				`Range "${start}"-"${end}": "${start}" is not a number`
			);
		} else if (isNaN(end)) {
			throw new InputError(
				`Range "${start}"-"${end}": "${end}" is not a number`
			);
		} else if (Number(start) > Number(end)) {
			throw new InputError(
				`Range "${start}"-"${end}": "${start}" is greater than "${end}"`
			);
		}
		this.start = Number(start);
		this.end = Number(end);
	}

	withinRange(n) {
		return Number(n) >= this.start && Number(n) <= this.end;
	}
	forEach(func) {
		for (let i = this.start; i <= this.end; ++i) {
			func(i);
		}
	}
}

class Sequence {
	constructor(string, lNr = 0) {
		this.iterator = -1;
		this.values = string.split(/,/);
		this.values.forEach((v) => {
			let m = v.match(/(-?[^-]+)-(-?[^-])/);
			if (m) {
				v = new Range(m[1], m[2]);
			} else if (isNaN(v)) {
				throw new InputError(
					`Sequence [${string}]: "${v}" is not a number`
				);
			}
		});
	}

	get get() {
		this.iterator = (this.iterator + 1) % this.values.length;
		return this.values[this.iterator];
	}
}

function displayMappings() {
	mappings.forEach(m => {
		Trace(`\nReceive:`);
		m.receive.forEach(r => {
			Trace(`   ${r}`);
		});
		Trace(`Send:`);
		m.send.forEach(s => {
			Trace(`   ${s}`);
		});
	});
}

createMappings();
displayMappings();

function HandleMIDI(event) {
	let key = RegExp(
		event
			.toString()
			.replace(/\[[^\][]+\]/, "") // remove information in brackets
			.replace(/:(\d+)/g, ":(?:\\d+|any)")
	); // add any to numbers
	let mappings = mappingKeys.filter(function (mapping) {
		return mapping.match(key);
	});
	if (mappings.length) {
		if (PASS_THROUGH_INPUT) {
			event.send();
		}
		mappings.forEach((messages) => {
			messages.forEach((message) => {
				message.send();
			});
		});
	} else if (SEND_UNMAPPED_MIDI || PASS_THROUGH_INPUT) {
		event.send();
	}
}

function Trace(string) {
	console.log(string);
}

/*

[ControlChange channel:1 number:100 [Reg.Par. LSB] value:100]
[NoteOn channel:1 pitch:100 [E6] velocity:100]
[NoteOff channel:1 pitch:100 [E6] velocity:0]
[ProgramChange channel:1 number:1]
[PolyPressure channel:1 pitch:100 [E6] value:0]
[ChannelPressure channel:1 value:0]
[PitchBend channel:1 value:0 [0%]]









var CONTROLLER = 1, PROGRAM_CHANGE = 2, NOTE = 3, CUSTOM = 4, SEQUENCE = 5;
var ABSOLUTE = 1;

var toggleMap =
{
	//0: {cc: 51, val: 0},
	1: {cc: 51, val: 127},
	//2: {cc: 52, val: 0},
	3: {cc: 52, val: 127},
	//4: {cc: 53, val: 0},
	5: {cc: 53, val: 127},
	//6: {cc: 54, val: 0},
	7: {cc: 54, val: 127},
	//8: {cc: 55, val: 0},
	9: {cc: 55, val: 127},
	//10: {cc: 56, val: 0},
	11: {cc: 56, val: 127},
	//12: {cc: 57, val: 0},
	13: {cc: 57, val: 127},
	//14: {cc: 58, val: 0},
	15: {cc: 58, val: 127},
	//16: {cc: 59, val: 0},
	//17: {cc: 59, val: 127} for master mute?
};

var map =
{
	ControlChanges: {
		channel1: {
			cc30: {
				val1: [
					{
						type: CONTROLLER,
						channels: [1],
						ccs: [51],
						values: []
					}
				]
			}
		},
		channel2: {
			cc86: {
				valAbsolute: [
					{
						type: CONTROLLER,
						channels: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
						ccs: [20],
						values: [ABSOLUTE]
					}
				]
			}
		}
	}
}

function



var toggles = [];
var tempCh, tempNr, tempVal, tempType;

function resolveCCChannel(event) {

}

function HandleMIDI(event)
{
	Trace("######## Incoming Event: " + event.toString() + "########");
	if (event instanceof ControlChange) {
		if (tempCh = map.ControlChanges["channel" + event.channel]) {
			if (tempNr = tempCh["cc" + event.number]) {
				if (tempVal = tempNr["valAbsolute"]) {
					for (let i = 0; i < tempVal.length; ++i) {
						tempType = tempVal[i];
						if (tempType.type == CONTROLLER) {
							for (let iCh = 0; iCh < tempType.channels.length; ++iCh) {
								for (let iCcs = 0; iCcs < tempType.ccs.length; ++iCcs) {
									for (let iValues = 0; iValues < tempType.values.length; ++iValues) {
										let cc = new ControlChange;
										cc.channel = tempType.channels[iCh];
										cc.number = tempType.ccs[iCcs];
										if (tempType.values[iValues] == ABSOLUTE) {
											cc.value = event.value;
										} else {
											cc.value = tempType.values[iValues];
										}
										cc.send();
										cc.trace();
									}
								}
							}
						} else if (temp2[i].type == PROGRAM_CHANGE) {

						} else if (temp2[i].type == NOTE) {

						} else if (temp2[i].type == CUSTOM) {

						} else if (temp2[i].type == SEQUENCE) {

						}
					}
				} else if (temp2 = temp1["val" + event.value]) {

				}
			}
		}
	}
}



	if (toggleMap[event.value])
	{
		event.number = keyMap[event.value].cc;
		if (toggle[event.number])
		{
			toggle[event.number] = event.value = 0;
		} else
		{
			toggle[event.number] = event.value = 127;
		}
		//event.send();
	}
*/
